<?php
/**
 * Module file for Kala Migrate.
 */

/**
 * Implements hook_menu().
 */
function kala_migrate_menu() {
  $items = array();

  $items['admin/config/development/kala_migrate'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Kala Migrate Settings'),
    'description' => t('Setting to Automate Migration to Drupal 8.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_kala_migrate_settings_form'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * hook_menu Page Callback.
 */
function _kala_migrate_settings_form() {
  $form['content_types'] = array(
    '#type' => 'checkbox',
    '#title' => t('Get all Content Types and Fields Associated with them?'),
  );

  $form['#submit'][] = '_kala_migrate_settings_form_submit';

  return system_settings_form($form);
}

/**
 * Submit handler for form.
 */
function _kala_migrate_settings_form_submit($form, &$form_state) {

  // Handle the CSV.
  header('Content-Encoding: UTF-8');
  header('Content-type: text/csv; charset=UTF-8');
  header('Content-Disposition: attachment; filename=migrate.csv');
  $f = fopen('php://output', 'w');

  if ($form_state['values']['content_types']) {
    $headers[0] = 'Type Name';
    $headers[1] = 'Type Machine Name';
    $headers[2] = 'Field Name';
    $headers[3] = 'Field Machine Name';
    $headers[4] = 'Field Type';
    $headers[5] = 'Field Required?';
    $headers[6] = '# of Values Allowed';
    $headers[7] = 'Field Settings';
    $headers[8] = 'Default Value';
    $headers[9] = 'Help Text';

    // print headers to CSV
    fputcsv($f, $headers);
    // Grab all Content Types
    $types = node_type_get_types();
    foreach ($types as $type) {
      // Grab all the fields of the type.
      $fields = field_info_instances('node', $type->type);
      foreach ($fields as $field) {
        // Load additional field info.
        $info = field_info_field($field['field_name']);
        // Load in widget info for labels.
        $widget = field_info_widget_types($field['widget']['type']);

        // Add non standard field types per module, skip some.
        $dontadd = array('text', 'link', 'list', 'none');
        // Check for the Module
        $module = isset($field['display']['default']['module']) ?
                  $field['display']['default']['module'] : 'none';

        // Add the non standard field type to the column output.
        $field_type = !in_array($module, $dontadd) ?
                      $module . ' ' . $widget['label'] : $widget['label'];

        // Grab the Number of Values allowed
        $nval = $info['cardinality'] == '-1' ? 'Unlimited' : $info['cardinality'];

        // Default Value
        $default = isset($field['default_value'][0]['value']) ?
                   $field['default_value'][0]['value'] : '';

        // Grab the settings if they exist.
        $settings = '';
        if (isset($field['widget']['settings'])) {
          foreach ($field['widget']['settings'] as $key => $value) {
            // Fixes file settings and other things like that.
            if (is_array($value)) {
              $flatvalue = '{';
              foreach ($value as $key2 => $value2) {
                $flatvalue .= '"' . $key2 . ' = ' . $value2 . '", ';
              }
              $value = rtrim($flatvalue, -2) . '}';
            }
            // Throw the settings into a happu string.
            $settings .= '"' . $key . ' = ' . $value . '", ';
          }
        }

        // Add the fields to the array to be added to the sheet.
        $body['Type Name'] = $type->name;
        $body['Type Machine Name'] = $type->type;
        $body['Field Name'] = $field['label'];
        $body['Field Machine Name'] = $field['field_name'];
        $body['Field Type'] = ucwords($field_type);
        $body['Field Required?'] = $field['required'] ? 'Y' : 'N';
        $body['# of Values Allowed'] = $nval;
        $body['Field Settings'] = $settings;
        $body['Default Value'] = $default;
        $body['Help Text'] = $field['description'];

        // throw it in the file meow.
        fputcsv($f, $body);
      }
    }
  }
  // Close this and trill this out.
  fclose($f);
  exit;
}
